[[plugins]]
repo = 'w0rp/ale'
hook_add='''
    let g:ale_linters = {
	    \'python':['flake8','autopep8','isort'],
	    \'HTML':['HTMLHint'],
	    \'JavaScript':['eslint'],
	    \'c':['gcc'],
	    \'cpp':['gcc'],
      \'scala':['scalastyle'],
      \'go':['gofmt'],
	    \}
    let g:ale_sign_column_always = 1
    let g:ale_fix_on_save = 1
    let g:ale_fixers = {
	    \'python':['autopep8'],
	    \'c':['clang-format'],
	    \'cpp':['clang-format'],
      \'scala':['scalastyle'],
      \'go':['gofmt'],
	    \}
    let g:ale_use_global_executables = 1
    nmap <S-f> <Plug>(ale_fix)"
    let g:ale_python_flake8_args = '--config ~/.config/flake8'
    let g:ale_python_autopep8_args = '--config ~/.config/pep8'
    let g:ale_sign_error = '⨉'
    let g:ale_sign_warning = '⚠'
'''

[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = 'python3'
hook_add = '''
  let g:jedi#force_py_version = 3
  let g:jedi#auto_initialization = 1
  let g:jedi#popup_select_first = 0
  let g:jedi#popup_on_dot = 0
  let g:jedi#show_call_signatures = 1
  let g:jedi#completions_command = "<C-k>"
  autocmd FileType python setlocal completeopt-=preview
'''

## c++ plugin
[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'
on_i = 1
hook_add = '''
    call deoplete#enable()
    " No display of the number of competion list
    set shortmess+=c

    " <TAB>: completion.
    inoremap <silent><expr> <C-k>
          \ pumvisible() ? "\<C-n>" :
          \ <SID>check_back_space() ? "\<C-k>" :
          \ deoplete#manual_complete()
    function! s:check_back_space() abort
      let col = col('.') - 1
      return !col || getline('')[col - 1]  =~ '\s'
    endfunction

    " <S-TAB>: completion back.
    inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<C-h>"
    " <C-e>: popup cancel
    inoremap <expr><C-e>       deoplete#cancel_popup()

    call deoplete#custom#source('_', 'matchers', ['matcher_head'])
    call deoplete#custom#source('_', 'converters', [
          \ 'converter_remove_paren',
          \ 'converter_remove_overlap',
          \ 'matcher_length',
          \ 'converter_truncate_abbr',
          \ 'converter_truncate_menu',
          \ 'converter_auto_delimiter',
          \ ])
    call deoplete#custom#option('keyword_patterns', {
          \ '_': '[a-zA-Z_]\k*\(?',
          \ 'tex': '[^\w|\s][a-zA-Z_]\w*',
          \ })
    call deoplete#custom#option('camel_case', v:true)
'''

[[plugins]]
repo = 'zchee/deoplete-clang'
on_ft = ['c', 'cpp', 'cmake']
hook_add = '''
    let g:deoplete#sources#clang#libclang_path = system("llvm-config --prefix")[:-2] . '/lib/libclang.dylib'
    let g:deoplete#sources#clang#clang_header = system("llvm-config --prefix")[:-2] . '/lib/clang'
    let g:deoplete#sources#clang#sort_algo = 'priority'
    let g:deoplete#sources#clang#clang_complete_database="./build/"
'''
depends = ['deoplete.nvim']

[[plugin]]
repo = 'tbodt/deoplete-tabnine'
hook_add = '''
call deoplete#custom#var('tabnine', {
\ 'line_limit': 500,
\ 'max_num_results': 20,
\ })
'''

[[plugins]]
repo = 'kannokanno/previm'
on_ft = ['markdown','mkd', 'md']
hook_add = '''
  let g:previm_open_cmd = 'open -a /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome'
'''


[[plugins]]
# lexima
repo = 'cohama/lexima.vim'
on_i = 1

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo    = 'vim-airline/vim-airline'
depends = ['vim-airline-themes']
hook_add = '''
  let g:airline_powerline_fonts = 1
  let g:airline_theme = 'badwolf'
  let g:airline#extensions#tabline#enabled = 1
  let g:airline_section_z = airline#section#create(['windowswap', '%3p%% ', 'linenr', ':%3v'])
  let g:airline#extensions#virtualenv#enabled = 1
  let g:airline#extensions#hunks#enabled = 0
  let g:airline#extensions#ale#enabled = 1
  let g:airline#extensions#ale#error_symbol = 'E:'
  let g:airline#extensions#ale#warning_symbol = 'W:'
'''

[[plugins]]
repo = "airblade/vim-gitgutter"

[[plugins]]
repo = "tpope/vim-fugitive"
